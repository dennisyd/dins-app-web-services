// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal-recipes-service.proto

package internal_recipes_service

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Recipe struct {
	Id          uint       `protobuf:"varint,1,opt,name=id,casttype=uint" json:"id" gorm:"primary_key,omitempty"`
	Name        string     `protobuf:"bytes,2,req,name=name" json:"name"`
	Description string     `protobuf:"bytes,3,req,name=description" json:"description"`
	Ingredients string     `protobuf:"bytes,4,opt,name=ingredients" json:"ingredients"`
	Steps       string     `protobuf:"bytes,5,opt,name=steps" json:"steps"`
	Difficulty  string     `protobuf:"bytes,6,opt,name=difficulty" json:"difficulty"`
	Price       string     `protobuf:"bytes,7,opt,name=price" json:"price"`
	Author      uint       `protobuf:"varint,8,opt,name=author,casttype=uint" json:"author"`
	Image       string     `protobuf:"bytes,9,opt,name=image" json:"image"`
	CreatedAt   *time.Time `protobuf:"bytes,10,opt,name=created_at,json=createdAt,stdtime" json:"created_at,omitempty"`
	UpdatedAt   *time.Time `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at,omitempty"`
}

func (m *Recipe) Reset()      { *m = Recipe{} }
func (*Recipe) ProtoMessage() {}
func (*Recipe) Descriptor() ([]byte, []int) {
	return fileDescriptor_459e21869af81ec2, []int{0}
}
func (m *Recipe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recipe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recipe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recipe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recipe.Merge(m, src)
}
func (m *Recipe) XXX_Size() int {
	return m.Size()
}
func (m *Recipe) XXX_DiscardUnknown() {
	xxx_messageInfo_Recipe.DiscardUnknown(m)
}

var xxx_messageInfo_Recipe proto.InternalMessageInfo

func (m *Recipe) GetId() uint {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Recipe) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Recipe) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Recipe) GetIngredients() string {
	if m != nil {
		return m.Ingredients
	}
	return ""
}

func (m *Recipe) GetSteps() string {
	if m != nil {
		return m.Steps
	}
	return ""
}

func (m *Recipe) GetDifficulty() string {
	if m != nil {
		return m.Difficulty
	}
	return ""
}

func (m *Recipe) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Recipe) GetAuthor() uint {
	if m != nil {
		return m.Author
	}
	return 0
}

func (m *Recipe) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Recipe) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Recipe) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Response struct {
	Recipe  *Recipe   `protobuf:"bytes,1,opt,name=recipe" json:"recipe,omitempty"`
	Recipes []*Recipe `protobuf:"bytes,2,rep,name=recipes" json:"recipes,omitempty"`
	Errors  []string  `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *Response) Reset()      { *m = Response{} }
func (*Response) ProtoMessage() {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_459e21869af81ec2, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetRecipe() *Recipe {
	if m != nil {
		return m.Recipe
	}
	return nil
}

func (m *Response) GetRecipes() []*Recipe {
	if m != nil {
		return m.Recipes
	}
	return nil
}

func (m *Response) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

type Request struct {
	Query map[string]string `protobuf:"bytes,1,rep,name=query" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Request) Reset()      { *m = Request{} }
func (*Request) ProtoMessage() {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_459e21869af81ec2, []int{2}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetQuery() map[string]string {
	if m != nil {
		return m.Query
	}
	return nil
}

type Timestamp struct {
	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999,999,999
	// inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos" json:"nanos"`
}

func (m *Timestamp) Reset()      { *m = Timestamp{} }
func (*Timestamp) ProtoMessage() {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_459e21869af81ec2, []int{3}
}
func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return m.Size()
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func (m *Timestamp) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Timestamp) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

func init() {
	proto.RegisterType((*Recipe)(nil), "internal_recipes_service.Recipe")
	proto.RegisterType((*Response)(nil), "internal_recipes_service.Response")
	proto.RegisterType((*Request)(nil), "internal_recipes_service.Request")
	proto.RegisterMapType((map[string]string)(nil), "internal_recipes_service.Request.QueryEntry")
	proto.RegisterType((*Timestamp)(nil), "internal_recipes_service.Timestamp")
}

func init() { proto.RegisterFile("internal-recipes-service.proto", fileDescriptor_459e21869af81ec2) }

var fileDescriptor_459e21869af81ec2 = []byte{
	// 602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbd, 0x6e, 0xd4, 0x4e,
	0x14, 0xc5, 0x3d, 0xeb, 0xfd, 0xc8, 0xde, 0xfd, 0xff, 0x85, 0x34, 0x45, 0x34, 0x5a, 0xa1, 0x59,
	0x63, 0x22, 0xb4, 0x45, 0xb2, 0x91, 0x22, 0x8a, 0x28, 0xa2, 0xc9, 0x02, 0x0a, 0x34, 0x08, 0x2c,
	0xfa, 0x95, 0x63, 0xdf, 0x6c, 0x46, 0x89, 0x3f, 0x32, 0x33, 0x8e, 0xe4, 0x8e, 0x47, 0x88, 0x44,
	0xc3, 0x23, 0xd0, 0xf3, 0x12, 0x29, 0x53, 0xa6, 0x0a, 0xc4, 0x4b, 0x41, 0x19, 0x51, 0x52, 0x21,
	0xcf, 0x7a, 0x13, 0x37, 0xf9, 0xa0, 0xf3, 0x9c, 0x7b, 0xce, 0x4f, 0xba, 0xf7, 0x18, 0xb8, 0x88,
	0x35, 0xca, 0xd8, 0x3f, 0x5c, 0x93, 0x18, 0x88, 0x14, 0xd5, 0x9a, 0x42, 0x79, 0x2c, 0x02, 0x1c,
	0xa5, 0x32, 0xd1, 0x09, 0x65, 0x8b, 0xf9, 0xa4, 0x9a, 0x4f, 0xaa, 0x79, 0x7f, 0x6d, 0x2a, 0xf4,
	0x7e, 0xb6, 0x3b, 0x0a, 0x92, 0x68, 0x7d, 0x9a, 0x4c, 0x93, 0x75, 0x13, 0xd8, 0xcd, 0xf6, 0xcc,
	0xcb, 0x3c, 0xcc, 0xd7, 0x1c, 0xe4, 0xfe, 0xb4, 0xa1, 0xed, 0x19, 0x04, 0x7d, 0x01, 0x0d, 0x11,
	0x32, 0xe2, 0x90, 0xe1, 0xff, 0xe3, 0xd5, 0xd3, 0x8b, 0x81, 0xf5, 0xfb, 0x62, 0xf0, 0x78, 0x9a,
	0xc8, 0x68, 0xcb, 0x4d, 0xa5, 0x88, 0x7c, 0x99, 0x4f, 0x0e, 0x30, 0x5f, 0x4d, 0x22, 0xa1, 0x31,
	0x4a, 0x75, 0xee, 0xfe, 0xb9, 0x18, 0x34, 0x33, 0x11, 0x6b, 0xaf, 0x21, 0x42, 0xca, 0xa0, 0x19,
	0xfb, 0x11, 0xb2, 0x86, 0xd3, 0x18, 0x76, 0xc7, 0xcd, 0x32, 0xef, 0x19, 0x85, 0x3e, 0x83, 0x5e,
	0x88, 0x2a, 0x90, 0x22, 0xd5, 0x22, 0x89, 0x99, 0x5d, 0x33, 0xd4, 0x07, 0xa5, 0x4f, 0xc4, 0x53,
	0x89, 0xa1, 0xc0, 0x58, 0x2b, 0xd6, 0x74, 0xc8, 0x8d, 0xaf, 0x36, 0xa0, 0x7d, 0x68, 0x29, 0x8d,
	0xa9, 0x62, 0xad, 0x9a, 0x63, 0x2e, 0xd1, 0x15, 0x80, 0x50, 0xec, 0xed, 0x89, 0x20, 0x3b, 0xd4,
	0x39, 0x6b, 0xd7, 0x0c, 0x35, 0xbd, 0x24, 0xa4, 0x52, 0x04, 0xc8, 0x3a, 0x75, 0x82, 0x91, 0xe8,
	0x0a, 0xb4, 0xfd, 0x4c, 0xef, 0x27, 0x92, 0x2d, 0x99, 0x4b, 0xfc, 0x57, 0x0e, 0xaf, 0x37, 0xad,
	0x66, 0x25, 0x41, 0x44, 0xfe, 0x14, 0x59, 0xb7, 0x4e, 0x30, 0x12, 0x7d, 0x03, 0x10, 0x48, 0xf4,
	0x35, 0x86, 0x13, 0x5f, 0x33, 0x70, 0xc8, 0xb0, 0xb7, 0xf1, 0x74, 0x74, 0x5b, 0x61, 0xa3, 0x8f,
	0x22, 0x42, 0xa5, 0xfd, 0x28, 0x1d, 0x37, 0x4f, 0xbe, 0x0f, 0x88, 0xd7, 0xad, 0xc2, 0xdb, 0xba,
	0x24, 0x65, 0x69, 0xb8, 0x20, 0xf5, 0xfe, 0x99, 0x54, 0x85, 0xb7, 0xb5, 0xfb, 0x85, 0xc0, 0x92,
	0x87, 0x2a, 0x4d, 0x62, 0x85, 0x74, 0x13, 0xda, 0xf3, 0xa8, 0x29, 0xbb, 0xb7, 0xe1, 0xdc, 0x8e,
	0x9c, 0xff, 0x1a, 0x5e, 0xe5, 0xa7, 0x5b, 0xd0, 0xa9, 0x1c, 0xac, 0xe1, 0xd8, 0x0f, 0x8a, 0x2e,
	0x02, 0x74, 0x19, 0xda, 0x28, 0x65, 0x22, 0x15, 0xb3, 0x1d, 0x7b, 0xd8, 0xf5, 0xaa, 0x97, 0xfb,
	0x99, 0x40, 0xc7, 0xc3, 0xa3, 0x0c, 0x95, 0xa6, 0x63, 0x68, 0x1d, 0x65, 0x28, 0x73, 0x46, 0x0c,
	0x7d, 0xf5, 0x2e, 0xba, 0x49, 0x8c, 0x3e, 0x94, 0xf6, 0xd7, 0xb1, 0x96, 0xb9, 0x37, 0x8f, 0xf6,
	0x5f, 0x01, 0xdc, 0x88, 0x74, 0x19, 0xec, 0x03, 0xcc, 0xcd, 0xa2, 0x8b, 0x9a, 0x4a, 0xa1, 0x2c,
	0xf0, 0xd8, 0x3f, 0xcc, 0xca, 0xff, 0xb5, 0x56, 0xa0, 0x91, 0xb6, 0x1a, 0x9b, 0xc4, 0xdd, 0x81,
	0xee, 0xf5, 0x39, 0x29, 0x87, 0x8e, 0xc2, 0x20, 0x89, 0x43, 0x65, 0x40, 0x76, 0x65, 0x5f, 0x88,
	0x25, 0x2c, 0xf6, 0xe3, 0x44, 0x19, 0x58, 0x6b, 0x01, 0x33, 0xd2, 0xc6, 0x37, 0x02, 0x8f, 0xde,
	0x56, 0x5b, 0x78, 0xd5, 0x29, 0xde, 0x43, 0xfb, 0xa5, 0x29, 0x99, 0xde, 0x7b, 0xbf, 0xbe, 0x7b,
	0x97, 0x63, 0x5e, 0xa8, 0x6b, 0xd1, 0x77, 0x60, 0xef, 0xa0, 0xa6, 0x4f, 0xee, 0x3d, 0xd8, 0xc3,
	0x78, 0xe3, 0xe7, 0x67, 0x97, 0xdc, 0x3a, 0xbf, 0xe4, 0xd6, 0xd5, 0x25, 0x27, 0x9f, 0x0a, 0x4e,
	0xbe, 0x16, 0x9c, 0x9c, 0x16, 0x9c, 0x9c, 0x15, 0x9c, 0xfc, 0x28, 0x38, 0xf9, 0x55, 0x70, 0xeb,
	0xaa, 0xe0, 0xe4, 0x64, 0xc6, 0xad, 0xb3, 0x19, 0xb7, 0xce, 0x67, 0xdc, 0xfa, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0xba, 0x09, 0x1e, 0xf7, 0xb6, 0x04, 0x00, 0x00,
}

func (this *Recipe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Recipe)
	if !ok {
		that2, ok := that.(Recipe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Ingredients != that1.Ingredients {
		return false
	}
	if this.Steps != that1.Steps {
		return false
	}
	if this.Difficulty != that1.Difficulty {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Author != that1.Author {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Recipe.Equal(that1.Recipe) {
		return false
	}
	if len(this.Recipes) != len(that1.Recipes) {
		return false
	}
	for i := range this.Recipes {
		if !this.Recipes[i].Equal(that1.Recipes[i]) {
			return false
		}
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if this.Errors[i] != that1.Errors[i] {
			return false
		}
	}
	return true
}
func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Query) != len(that1.Query) {
		return false
	}
	for i := range this.Query {
		if this.Query[i] != that1.Query[i] {
			return false
		}
	}
	return true
}
func (this *Timestamp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Timestamp)
	if !ok {
		that2, ok := that.(Timestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seconds != that1.Seconds {
		return false
	}
	if this.Nanos != that1.Nanos {
		return false
	}
	return true
}
func (this *Recipe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&internal_recipes_service.Recipe{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Ingredients: "+fmt.Sprintf("%#v", this.Ingredients)+",\n")
	s = append(s, "Steps: "+fmt.Sprintf("%#v", this.Steps)+",\n")
	s = append(s, "Difficulty: "+fmt.Sprintf("%#v", this.Difficulty)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Author: "+fmt.Sprintf("%#v", this.Author)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+valueToGoStringInternalRecipesService(this.CreatedAt, "time.Time")+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+valueToGoStringInternalRecipesService(this.UpdatedAt, "time.Time")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&internal_recipes_service.Response{")
	if this.Recipe != nil {
		s = append(s, "Recipe: "+fmt.Sprintf("%#v", this.Recipe)+",\n")
	}
	if this.Recipes != nil {
		s = append(s, "Recipes: "+fmt.Sprintf("%#v", this.Recipes)+",\n")
	}
	if this.Errors != nil {
		s = append(s, "Errors: "+fmt.Sprintf("%#v", this.Errors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&internal_recipes_service.Request{")
	keysForQuery := make([]string, 0, len(this.Query))
	for k, _ := range this.Query {
		keysForQuery = append(keysForQuery, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQuery)
	mapStringForQuery := "map[string]string{"
	for _, k := range keysForQuery {
		mapStringForQuery += fmt.Sprintf("%#v: %#v,", k, this.Query[k])
	}
	mapStringForQuery += "}"
	if this.Query != nil {
		s = append(s, "Query: "+mapStringForQuery+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Timestamp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&internal_recipes_service.Timestamp{")
	s = append(s, "Seconds: "+fmt.Sprintf("%#v", this.Seconds)+",\n")
	s = append(s, "Nanos: "+fmt.Sprintf("%#v", this.Nanos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInternalRecipesService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InternalRecipesClient is the client API for InternalRecipes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InternalRecipesClient interface {
	Create(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type internalRecipesClient struct {
	cc *grpc.ClientConn
}

func NewInternalRecipesClient(cc *grpc.ClientConn) InternalRecipesClient {
	return &internalRecipesClient{cc}
}

func (c *internalRecipesClient) Create(ctx context.Context, in *Recipe, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/internal_recipes_service.InternalRecipes/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalRecipesClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/internal_recipes_service.InternalRecipes/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalRecipesServer is the server API for InternalRecipes service.
type InternalRecipesServer interface {
	Create(context.Context, *Recipe) (*Response, error)
	Get(context.Context, *Request) (*Response, error)
}

func RegisterInternalRecipesServer(s *grpc.Server, srv InternalRecipesServer) {
	s.RegisterService(&_InternalRecipes_serviceDesc, srv)
}

func _InternalRecipes_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Recipe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalRecipesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal_recipes_service.InternalRecipes/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalRecipesServer).Create(ctx, req.(*Recipe))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalRecipes_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalRecipesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal_recipes_service.InternalRecipes/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalRecipesServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _InternalRecipes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal_recipes_service.InternalRecipes",
	HandlerType: (*InternalRecipesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _InternalRecipes_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _InternalRecipes_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal-recipes-service.proto",
}

func (m *Recipe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recipe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintInternalRecipesService(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintInternalRecipesService(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintInternalRecipesService(dAtA, i, uint64(len(m.Description)))
	i += copy(dAtA[i:], m.Description)
	dAtA[i] = 0x22
	i++
	i = encodeVarintInternalRecipesService(dAtA, i, uint64(len(m.Ingredients)))
	i += copy(dAtA[i:], m.Ingredients)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintInternalRecipesService(dAtA, i, uint64(len(m.Steps)))
	i += copy(dAtA[i:], m.Steps)
	dAtA[i] = 0x32
	i++
	i = encodeVarintInternalRecipesService(dAtA, i, uint64(len(m.Difficulty)))
	i += copy(dAtA[i:], m.Difficulty)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintInternalRecipesService(dAtA, i, uint64(len(m.Price)))
	i += copy(dAtA[i:], m.Price)
	dAtA[i] = 0x40
	i++
	i = encodeVarintInternalRecipesService(dAtA, i, uint64(m.Author))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintInternalRecipesService(dAtA, i, uint64(len(m.Image)))
	i += copy(dAtA[i:], m.Image)
	if m.CreatedAt != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintInternalRecipesService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UpdatedAt != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintInternalRecipesService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)))
		n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Recipe != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternalRecipesService(dAtA, i, uint64(m.Recipe.Size()))
		n3, err := m.Recipe.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Recipes) > 0 {
		for _, msg := range m.Recipes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintInternalRecipesService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		for k, _ := range m.Query {
			dAtA[i] = 0xa
			i++
			v := m.Query[k]
			mapSize := 1 + len(k) + sovInternalRecipesService(uint64(len(k))) + 1 + len(v) + sovInternalRecipesService(uint64(len(v)))
			i = encodeVarintInternalRecipesService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternalRecipesService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintInternalRecipesService(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timestamp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintInternalRecipesService(dAtA, i, uint64(m.Seconds))
	dAtA[i] = 0x10
	i++
	i = encodeVarintInternalRecipesService(dAtA, i, uint64(m.Nanos))
	return i, nil
}

func encodeVarintInternalRecipesService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Recipe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovInternalRecipesService(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovInternalRecipesService(uint64(l))
	l = len(m.Description)
	n += 1 + l + sovInternalRecipesService(uint64(l))
	l = len(m.Ingredients)
	n += 1 + l + sovInternalRecipesService(uint64(l))
	l = len(m.Steps)
	n += 1 + l + sovInternalRecipesService(uint64(l))
	l = len(m.Difficulty)
	n += 1 + l + sovInternalRecipesService(uint64(l))
	l = len(m.Price)
	n += 1 + l + sovInternalRecipesService(uint64(l))
	n += 1 + sovInternalRecipesService(uint64(m.Author))
	l = len(m.Image)
	n += 1 + l + sovInternalRecipesService(uint64(l))
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovInternalRecipesService(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovInternalRecipesService(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Recipe != nil {
		l = m.Recipe.Size()
		n += 1 + l + sovInternalRecipesService(uint64(l))
	}
	if len(m.Recipes) > 0 {
		for _, e := range m.Recipes {
			l = e.Size()
			n += 1 + l + sovInternalRecipesService(uint64(l))
		}
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovInternalRecipesService(uint64(l))
		}
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Query) > 0 {
		for k, v := range m.Query {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovInternalRecipesService(uint64(len(k))) + 1 + len(v) + sovInternalRecipesService(uint64(len(v)))
			n += mapEntrySize + 1 + sovInternalRecipesService(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Timestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovInternalRecipesService(uint64(m.Seconds))
	n += 1 + sovInternalRecipesService(uint64(m.Nanos))
	return n
}

func sovInternalRecipesService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInternalRecipesService(x uint64) (n int) {
	return sovInternalRecipesService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Recipe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Recipe{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Ingredients:` + fmt.Sprintf("%v", this.Ingredients) + `,`,
		`Steps:` + fmt.Sprintf("%v", this.Steps) + `,`,
		`Difficulty:` + fmt.Sprintf("%v", this.Difficulty) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Author:` + fmt.Sprintf("%v", this.Author) + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Recipe:` + strings.Replace(fmt.Sprintf("%v", this.Recipe), "Recipe", "Recipe", 1) + `,`,
		`Recipes:` + strings.Replace(fmt.Sprintf("%v", this.Recipes), "Recipe", "Recipe", 1) + `,`,
		`Errors:` + fmt.Sprintf("%v", this.Errors) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request) String() string {
	if this == nil {
		return "nil"
	}
	keysForQuery := make([]string, 0, len(this.Query))
	for k, _ := range this.Query {
		keysForQuery = append(keysForQuery, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQuery)
	mapStringForQuery := "map[string]string{"
	for _, k := range keysForQuery {
		mapStringForQuery += fmt.Sprintf("%v: %v,", k, this.Query[k])
	}
	mapStringForQuery += "}"
	s := strings.Join([]string{`&Request{`,
		`Query:` + mapStringForQuery + `,`,
		`}`,
	}, "")
	return s
}
func (this *Timestamp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Timestamp{`,
		`Seconds:` + fmt.Sprintf("%v", this.Seconds) + `,`,
		`Nanos:` + fmt.Sprintf("%v", this.Nanos) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInternalRecipesService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Recipe) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternalRecipesService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recipe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recipe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingredients", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ingredients = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Steps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difficulty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Difficulty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			m.Author = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Author |= uint(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternalRecipesService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("description")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternalRecipesService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recipe == nil {
				m.Recipe = &Recipe{}
			}
			if err := m.Recipe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipes = append(m.Recipes, &Recipe{})
			if err := m.Recipes[len(m.Recipes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternalRecipesService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternalRecipesService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternalRecipesService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternalRecipesService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInternalRecipesService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInternalRecipesService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternalRecipesService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthInternalRecipesService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthInternalRecipesService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInternalRecipesService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInternalRecipesService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Query[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternalRecipesService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternalRecipesService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanos", wireType)
			}
			m.Nanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nanos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternalRecipesService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternalRecipesService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternalRecipesService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternalRecipesService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternalRecipesService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInternalRecipesService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthInternalRecipesService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInternalRecipesService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInternalRecipesService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthInternalRecipesService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInternalRecipesService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternalRecipesService   = fmt.Errorf("proto: integer overflow")
)
