// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: internal-recipes-service.proto

/*
Package lasagna_srv_internal_recipes_service is a generated protocol buffer package.

It is generated from these files:
	internal-recipes-service.proto

It has these top-level messages:
	Recipe
	GetRequest
	Response
*/
package lasagna_srv_internal_recipes_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for InternalRecipesService service

type InternalRecipesService interface {
	CreateRecipe(ctx context.Context, in *Recipe, opts ...client.CallOption) (*Response, error)
	GetRecipes(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*Response, error)
}

type internalRecipesService struct {
	c    client.Client
	name string
}

func NewInternalRecipesService(name string, c client.Client) InternalRecipesService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "lasagna.srv.internal.recipes.service"
	}
	return &internalRecipesService{
		c:    c,
		name: name,
	}
}

func (c *internalRecipesService) CreateRecipe(ctx context.Context, in *Recipe, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "InternalRecipesService.CreateRecipe", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalRecipesService) GetRecipes(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "InternalRecipesService.GetRecipes", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InternalRecipesService service

type InternalRecipesServiceHandler interface {
	CreateRecipe(context.Context, *Recipe, *Response) error
	GetRecipes(context.Context, *GetRequest, *Response) error
}

func RegisterInternalRecipesServiceHandler(s server.Server, hdlr InternalRecipesServiceHandler, opts ...server.HandlerOption) error {
	type internalRecipesService interface {
		CreateRecipe(ctx context.Context, in *Recipe, out *Response) error
		GetRecipes(ctx context.Context, in *GetRequest, out *Response) error
	}
	type InternalRecipesService struct {
		internalRecipesService
	}
	h := &internalRecipesServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&InternalRecipesService{h}, opts...))
}

type internalRecipesServiceHandler struct {
	InternalRecipesServiceHandler
}

func (h *internalRecipesServiceHandler) CreateRecipe(ctx context.Context, in *Recipe, out *Response) error {
	return h.InternalRecipesServiceHandler.CreateRecipe(ctx, in, out)
}

func (h *internalRecipesServiceHandler) GetRecipes(ctx context.Context, in *GetRequest, out *Response) error {
	return h.InternalRecipesServiceHandler.GetRecipes(ctx, in, out)
}
