// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: identity-service.proto

/*
Package lasagna_identity_service is a generated protocol buffer package.

It is generated from these files:
	identity-service.proto

It has these top-level messages:
	User
	CreateUserRequest
	CreateUserResponse
*/
package lasagna_identity_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for IdentityService service

type IdentityService interface {
	Create(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
}

type identityService struct {
	c    client.Client
	name string
}

func NewIdentityService(name string, c client.Client) IdentityService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "lasagna.identity.service"
	}
	return &identityService{
		c:    c,
		name: name,
	}
}

func (c *identityService) Create(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "IdentityService.Create", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdentityService service

type IdentityServiceHandler interface {
	Create(context.Context, *CreateUserRequest, *CreateUserResponse) error
}

func RegisterIdentityServiceHandler(s server.Server, hdlr IdentityServiceHandler, opts ...server.HandlerOption) error {
	type identityService interface {
		Create(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
	}
	type IdentityService struct {
		identityService
	}
	h := &identityServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&IdentityService{h}, opts...))
}

type identityServiceHandler struct {
	IdentityServiceHandler
}

func (h *identityServiceHandler) Create(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.IdentityServiceHandler.Create(ctx, in, out)
}
