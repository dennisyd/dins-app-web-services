// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: identity-service.proto

/*
Package lasagna_identity is a generated protocol buffer package.

It is generated from these files:
	identity-service.proto

It has these top-level messages:
	User
	Response
	Request
	Token
	Error
	Timestamp
*/
package lasagna_identity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Identity service

type IdentityService interface {
	Create(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	Get(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Auth(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error)
	ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error)
}

type identityService struct {
	c    client.Client
	name string
}

func NewIdentityService(name string, c client.Client) IdentityService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "lasagna.identity"
	}
	return &identityService{
		c:    c,
		name: name,
	}
}

func (c *identityService) Create(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Identity.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) Get(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Identity.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Identity.GetAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) Auth(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Identity.Auth", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityService) ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Identity.ValidateToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Identity service

type IdentityHandler interface {
	Create(context.Context, *User, *Response) error
	Get(context.Context, *User, *Response) error
	GetAll(context.Context, *Request, *Response) error
	Auth(context.Context, *User, *Token) error
	ValidateToken(context.Context, *Token, *Token) error
}

func RegisterIdentityHandler(s server.Server, hdlr IdentityHandler, opts ...server.HandlerOption) error {
	type identity interface {
		Create(ctx context.Context, in *User, out *Response) error
		Get(ctx context.Context, in *User, out *Response) error
		GetAll(ctx context.Context, in *Request, out *Response) error
		Auth(ctx context.Context, in *User, out *Token) error
		ValidateToken(ctx context.Context, in *Token, out *Token) error
	}
	type Identity struct {
		identity
	}
	h := &identityHandler{hdlr}
	return s.Handle(s.NewHandler(&Identity{h}, opts...))
}

type identityHandler struct {
	IdentityHandler
}

func (h *identityHandler) Create(ctx context.Context, in *User, out *Response) error {
	return h.IdentityHandler.Create(ctx, in, out)
}

func (h *identityHandler) Get(ctx context.Context, in *User, out *Response) error {
	return h.IdentityHandler.Get(ctx, in, out)
}

func (h *identityHandler) GetAll(ctx context.Context, in *Request, out *Response) error {
	return h.IdentityHandler.GetAll(ctx, in, out)
}

func (h *identityHandler) Auth(ctx context.Context, in *User, out *Token) error {
	return h.IdentityHandler.Auth(ctx, in, out)
}

func (h *identityHandler) ValidateToken(ctx context.Context, in *Token, out *Token) error {
	return h.IdentityHandler.ValidateToken(ctx, in, out)
}
